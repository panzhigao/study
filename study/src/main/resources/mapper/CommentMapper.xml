<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pan.mapper.CommentMapper">

	<resultMap id="BaseResultMap" type="com.pan.entity.Comment">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="article_id" property="articleId" jdbcType="BIGINT" />
		<result column="user_id" property="userId" jdbcType="BIGINT" />
		<result column="comment_content" property="commentContent" jdbcType="VARCHAR" />
		<result column="reply_to_user_id" property="replyToUserId" jdbcType="BIGINT" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="praise_counts" property="praiseCounts" jdbcType="INTEGER" />
	</resultMap>

	<resultMap type="com.pan.vo.CommentVO" id="VOMap" extends="BaseResultMap">
		<result column="user_portrait" property="userPortrait"
			jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="isChecked" property="isChecked" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id,article_id,user_id,comment_content,reply_to_user_id,create_time,praise_counts
	</sql>

	<insert id="insertSelective" parameterType="com.pan.entity.Comment">
		insert into t_comment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="commentId != null">
				comment_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="articleId != null">
				article_id,
			</if>
			<if test="commentContent != null">
				comment_content,
			</if>
			<if test="replyToUserId != null">
				reply_to_user_id,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="praiseCounts != null">
				praise_counts,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="commentId != null">
				#{commentId,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="articleId != null">
				#{articleId,jdbcType=VARCHAR},
			</if>
			<if test="commentContent != null">
				#{commentContent,jdbcType=VARCHAR},
			</if>
			<if test="replyToUserId != null">
				#{replyToUserId,jdbcType=BIGINT},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="praiseCounts != null">
				#{praiseCounts,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>

	<select id="findVOByParams" resultMap="VOMap" parameterType="com.pan.query.QueryComment">
		<!-- select c.id,comment_id,c.article_id,c.user_id,comment_content,reply_to_user_id,c.create_time,u.user_portrait,u.nickname 
			from t_comment c join t_user u on c.user_id=u.user_id where article_id=#{articleId} -->
		<!-- select a.id,a.comment_id,a.article_id,a.user_id,a.comment_content,a.reply_to_user_id,a.create_time,a.praise_counts,c.user_portrait,c.nickname,case 
			when b.user_id=#{userId} then 1 else null end isChecked -->
		<!-- from t_comment a left join t_praise b on a.comment_id=b.comment_id -->
		<!-- join t_user c on c.user_id=a.user_id where article_id=#{articleId} -->
		select
		tc.id,tc.article_id,tc.user_id,tc.comment_content,tc.reply_to_user_id,
		tc.create_time,tc.praise_counts,tu.user_portrait,tu.nickname
		<if test="userId != null and userId !=''">
			,
			ifnull(tp.user_id,null) isChecked
		</if>
		from t_comment tc
		<if test="userId != null and userId !=''">
			left join (select id,user_id from t_praise where
			user_id=#{userId}) tp on tc.comment_id=tp.id
		</if>
		join t_user tu on tu.user_id=tc.user_id where tc.article_id=#{articleId}
		order by tc.create_time desc
		<if test="offset!=null and row !=null">
			limit #{offset},#{row}
		</if>
	</select>


	<select id="findPageable" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_comment
		<include refid="whereSql"/>
	</select>
	
	<select id="countByParams" resultType="int" parameterType="com.pan.query.QueryComment">
		select count(0) from t_comment
		<include refid="whereSql"/>
	</select>
	
	<sql id="whereSql">
		<where>
			<if test="articleId != null">
				and article_id=#{articleId,jdbcType=BIGINT}
			</if>
			<if test="commentId != null">
				and comment_id=#{commentId,,jdbcType=BIGINT}
			</if>
			<if test="userId != null">
				and user_id=#{userId,,jdbcType=VARCHAR}
			</if>
		</where>
	</sql>
	
	<delete id="deleteByPrimaryKey">
		delete from t_comment
		where id = #{id,jdbcType=BIGINT}
	</delete>

	<update id="updatePraiseCountsByPrimaryKey">
		update t_comment set praise_counts=praise_counts+1
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="findVOByUserId" resultMap="VOMap">
		select
		a.id,a.comment_id,a.article_id,a.user_id,a.comment_content,a.reply_to_user_id,
		a.create_time,a.praise_counts,c.user_portrait,c.nickname,d.title
		from
		t_comment a left join t_user c on a.user_id=c.user_id join t_article d
		on d.article_id=a.article_id
		where a.user_id=#{userId}
	</select>
</mapper>